def Build_SW_Echo_Client = 'Pending'
def Build_SW_Echo_Server = 'Pending'
def Flash_board_echo_server = 'Pending'
def Flash_board_echo_client = 'Pending'
def smoke_tests = 'Pending'
def Flash_board = 'Pending'
def Build_SW = 'Pending'

pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Pr_Build for echo-client and echo-server') {
            when {
                anyOf {
                    branch 'PR-*'
                    branch 'main'
                }
            }
            agent { label 'pr_check_sdk_alif' }
            options { skipDefaultCheckout() }
            steps {
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        try {
                            sh '''#!/bin/bash -xe
                            pwd
                            env
                            cd /root/alif/public/alif
                            git status
                            git clean -fd
                            git pull
                            if [[ -v CHANGE_ID ]]; then
                                git branch -D pr-${CHANGE_ID} || true
                                git clean -fd
                                git fetch origin pull/${CHANGE_ID}/head:pr-${CHANGE_ID}
                                git checkout pr-${CHANGE_ID}
                            fi
                            cd ..
                            west update
                            ls -la
                            cd /root/alif/public/alif/scripts
                            pip install -r requirements.txt
                            cd /root/alif/public/zephyr/scripts
                            pip install -r requirements.txt
                            cd /root/alif/public
                            west build -p always -b alif_b1_dk_rtss_he zephyr/samples/net/sockets/echo_client -- -DEXTRA_CONF_FILE=overlay-ot.conf
                            cp /root/alif/public/build/zephyr/zephyr.bin $WORKSPACE
                            cp /root/alif/public/alif/automation/B1-test-app.json $WORKSPACE
                            mv /root/alif/public/build $WORKSPACE
                            cd $WORKSPACE
                            tar -cvf build_client.tar build/
                            rm -fr build/
                            pwd
                            ls -la
                            '''
                            stash name: 'echo_client.bin', includes: 'zephyr.bin'
                            stash name: 'echo_client_B1-test-app.json', includes: 'B1-test-app.json'
                            Build_SW_Echo_Client = 'Pass'
                        } catch (Exception e) {
                            Build_SW_Echo_Client = 'Fail'
                            error('Build failed')
                        }
                    }
                    if (Build_SW_Echo_Client == 'Pass') {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            try {
                                sh '''#!/bin/bash -xe
                                cd /root/alif/public
                                west build -p always -b alif_b1_dk_rtss_he zephyr/samples/net/sockets/echo_server -- -DEXTRA_CONF_FILE=overlay-ot.conf
                                cp /root/alif/public/build/zephyr/zephyr.bin $WORKSPACE
                                cp /root/alif/public/alif/automation/B1-test-app.json $WORKSPACE
                                mv /root/alif/public/build $WORKSPACE
                                cd $WORKSPACE
                                tar -cvf build_server.tar build/
                                pwd
                                ls -la
                                '''
                                stash name: 'echo_server.bin', includes: 'zephyr.bin'
                                stash name: 'echo_server_B1-test-app.json', includes: 'B1-test-app.json'
                                Build_SW_Echo_Server = 'Pass'
                            } catch (Exception e) {
                                Build_SW_Echo_Server = 'Fail'
                                error('Build failed')
                            }
                        }
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: '*.tar', fingerprint: true
                }
            }
        }

        stage('Flash the board for echo_client') {
            agent { label 'lasse' }
            steps {
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        try {
                            unstash name: 'echo_client.bin'
                            unstash name: 'echo_client_B1-test-app.json'
                            sh """#!/bin/bash -xe
                            pwd
                            rsync -a --delete $ALIF_SETOOLS_ORIG $ALIF_SETOOLS_LOCATION
                            cp zephyr.bin $ALIF_SETOOLS_LOCATION/build/images/test-app.bin
                            cp B1-test-app.json $ALIF_SETOOLS_LOCATION/build/config/
                            pushd $ALIF_SETOOLS_LOCATION
                            sed -e 's/ttyUSB0/ttyAlifSEDUT1/g' isp_config_data_temp.cfg > isp_config_data.cfg
                            ./tools-config -p "B1 (AB1C1F4M51820PH) - 1.8 MRAM / 2.0 SRAM" -r "A0"
                            ./app-gen-toc --filename build/config/B1-test-app.json
                            ./app-write-mram -p
                            popd
                            """
                            Flash_board_echo_client = 'Pass'
                        } catch (Exception e) {
                            Flash_board_echo_client = 'Fail'
                            error('Flash_board failed')
                        }
                    }
                }
            }
        }

        stage('Flash the board for echo_server') {
            agent { label 'lasse' }
            steps {
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        try {
                            unstash name: 'echo_server.bin'
                            unstash name: 'echo_server_B1-test-app.json'
                            sh """#!/bin/bash -xe
                            pwd
                            rsync -a --delete $ALIF_SETOOLS_ORIG $ALIF_SETOOLS_LOCATION
                            cp zephyr.bin $ALIF_SETOOLS_LOCATION/build/images/test-app.bin
                            cp B1-test-app.json $ALIF_SETOOLS_LOCATION/build/config/
                            pushd $ALIF_SETOOLS_LOCATION
                            sed -e 's/ttyUSB0/ttyAlifSEDUT2/g' isp_config_data_temp.cfg > isp_config_data.cfg
                            ./tools-config -p "B1 (AB1C1F4M51820PH) - 1.8 MRAM / 2.0 SRAM" -r "A0"
                            ./app-gen-toc --filename build/config/B1-test-app.json
                            ./app-write-mram -p
                            popd
                            """
                            reset_board()
                            Flash_board_echo_server = 'Pass'
                        } catch (Exception e) {
                            Flash_board_echo_server = 'Fail'
                            error('Flash_board failed')
                        }
                    }
                }
            }
        }

        stage('Pr_Build for test-app') {
            when {
                anyOf {
                    branch 'PR-*'
                    branch 'main'
                }
            }
            agent { label 'zephyr_alif_sdk_ble' }
            options { skipDefaultCheckout() }
            steps {
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        try{
                            sh '''#!/bin/bash -xe
                            pwd
                            cd /root/alif
                            west forall -c "git clean -fdx"
                            cd /root/alif/sdk-alif/
                            git status
                            if [[ -v CHANGE_ID ]]; then
                                git branch -D pr-${CHANGE_ID} || true
                                git fetch origin pull/${CHANGE_ID}/head:pr-${CHANGE_ID}
                                git checkout pr-${CHANGE_ID}
                            else
                                git fetch origin -pu
                                git checkout main
                                git reset --hard origin/main
                            fi
                            cd ..
                            west update
                            cd /root/alif/sdk-alif/
                            ls -la
                            west build -p always -b alif_b1_dk_rtss_he applications/testapp
                            cp /root/alif/sdk-alif/build/zephyr/zephyr.bin $WORKSPACE
                            mv /root/alif/sdk-alif/build $WORKSPACE
                            cd $WORKSPACE
                            tar -cvf build.tar build/
                            pwd
                            '''
                            stash name: 'zephyr.bin', includes: 'zephyr.bin'
                            Build_SW = 'Pass'
                        } catch (Exception e) {
                            Build_SW = 'Fail'
                            error('Build failed')
                        }
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'build.tar', fingerprint: true
                }
            }
        }

        stage('Flash and run Smoke test') {
            agent { label 'lasse' }
            steps {
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        try {
                            unstash 'zephyr.bin'
                            checkout changelog: false, poll: false, scm: scmGit(branches: [[name: '*/main']],
                                extensions: [submodule(parentCredentials: true, reference: '')],
                                userRemoteConfigs: [[credentialsId: '533fc6b7-f0f5-4514-9629-1c55a011e1d3',
                                    url: 'git@github.com:AlifSemiDev/jenkins_automation.git']])
                            sh """#!/bin/bash -xe
                                ls -lart
                                rsync -a --delete $ALIF_SETOOLS_ORIG $ALIF_SETOOLS_LOCATION
                                cp zephyr.bin $ALIF_SETOOLS_LOCATION/build/images/test-app.bin
                                cp ble_automation/B1-test-app.json $ALIF_SETOOLS_LOCATION/build/config/
                                pushd $ALIF_SETOOLS_LOCATION
                                sed -e 's/ttyUSB0/ttyAlifSEDUT1/g' isp_config_data_temp.cfg > isp_config_data.cfg
                                ./tools-config -p "B1 (AB1C1F4M51820PH) - 1.8 MRAM / 2.0 SRAM" -r "A0"
                                ./app-gen-toc --filename build/config/B1-test-app.json
                                ./app-write-mram -p
                                sed -e 's/ttyUSB0/ttyAlifSEDUT2/g' isp_config_data_temp.cfg > isp_config_data.cfg
                                ./tools-config -p "B1 (AB1C1F4M51820PH) - 1.8 MRAM / 2.0 SRAM" -r "A0"
                                ./app-gen-toc --filename build/config/B1-test-app.json
                                ./app-write-mram -p
                                popd
                                """
                            reset_boards()
                            Flash_board = 'Pass'
                        } catch (Exception e) {
                            Flash_board = 'Fail'
                            error('Flash_board failed')
                        }
                    }
                    if (Flash_board == 'Pass') {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            try {
                                sh """
                                #!/bin/bash -xe
                                pwd
                                cd pytest
                                python3 -m venv venv
                                . venv/bin/activate
                                pip install -r requirements.txt
                                sed -e 's/ttyACM0/ttyAlifHEDUT1/g' -e 's/ttyACM1/ttyAlifHEDUT2/g' pytest_ini.template > pytest.ini
                                pytest tests --tb=no -s --root-logdir=pytest-logs
                                """
                                smoke_tests = 'Pass'
                            } catch (Exception e) {
                                smoke_tests = 'Fail'
                                error('Smoke_tests failed')
                            }
                        }
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'pytest/pytest-logs/**', fingerprint: true
                    cleanWs(cleanWhenNotBuilt: false, deleteDirs:true,
                            disableDeferredWipeout: true, notFailBuild: true)
                }
            }
        }

        stage('Summary') {
            steps {
                script {
                    echo """
                    ========= Build Summary =========
                    Build_SW_Echo_Client     = ${Build_SW_Echo_Client}
                    Build_SW_Echo_Server     = ${Build_SW_Echo_Server}
                    Flash_board_echo_client  = ${Flash_board_echo_client}
                    Flash_board_echo_server  = ${Flash_board_echo_server}
                    Build_SW                 = ${Build_SW}
                    Flash_board              = ${Flash_board}
                    smoke_tests              = ${smoke_tests}
                    =================================
                    """

                    if ([Build_SW_Echo_Client, Build_SW_Echo_Server,
                         Flash_board_echo_client, Flash_board_echo_server,
                         Build_SW, Flash_board, smoke_tests].contains('Fail')) {
                        currentBuild.result = 'FAILURE'
                        error("One or more stages failed.")
                    }
                }
            }
        }
    }

    post {
        success {
            echo " Pr check passed for ${env.BRANCH_NAME}"
        }
        failure {
            echo " Pr check failed for ${env.BRANCH_NAME}"
        }
    }
}
def reset_board() {
    def maxRetries = 10
    def success = false

    for (int attempt = 1; attempt <= maxRetries; attempt++) {
        println " Attempt #${attempt} to reset board"

        sh """#!/bin/bash -x
            ykushcmd ykushxs -s $YKUSHDUT1 -d
            ykushcmd ykushxs -s $YKUSHDUT2 -d
            sleep 10
            ykushcmd ykushxs -s $YKUSHDUT1 -u
            ykushcmd ykushxs -s $YKUSHDUT2 -u
            sleep 5
        """
        def checkStatus = sh(script: 'python3 $WORKSPACE/automation/check_uart_output.py', returnStatus: true)
        if (checkStatus == 0) {
            success = true
            break
        } else {
            println ' Retrying...'
        }
    }
    if (!success) {
        error " board did not respond after ${maxRetries} attempts!"
    }
}
def reset_boards() {
    def maxRetries = 10
    def success = false

    for (int attempt = 1; attempt <= maxRetries; attempt++) {
        println " Attempt #${attempt} to reset board"

        sh """#!/bin/bash -x
            ykushcmd ykushxs -s $YKUSHDUT1 -d
            ykushcmd ykushxs -s $YKUSHDUT2 -d
            sleep 10
            ykushcmd ykushxs -s $YKUSHDUT1 -u
            ykushcmd ykushxs -s $YKUSHDUT2 -u
            sleep 5
        """
        def checkStatus = sh(script: 'python3 ble_automation/check_uart_output.py', returnStatus: true)
        if (checkStatus == 0) {
            success = true
            break
        } else {
            println ' Retrying...'
        }
    }
    if (!success) {
        error " board did not respond after ${maxRetries} attempts!"
    }
}

