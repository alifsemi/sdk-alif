# Alif SDK Linker Module Kconfig options

menuconfig ALIF_LINKER_WORKAROUNDS
	bool "Enable Alif linker workarounds"
	default y if "$(ZEPHYR_TOOLCHAIN_VARIANT)" = "llvm"
	help
	  This option enables linker workarounds for known issues with LLVM/Clang
	  compiler, particularly for handling exception tables and RAM functions.
	  It's automatically enabled when using LLVM/Clang without exceptions.
	  The workarounds are not needed when exceptions are enabled, as the
	  exception tables are required in that case.

if ALIF_LINKER_WORKAROUNDS

config ALIF_DISCARD_EXCEPTION_TABLES
	bool "Discard exception tables"
	default y if !EXCEPTIONS
	help
	  This option discards exception tables (.ARM.exidx sections) that are
	  generated by LLVM/Clang even when exceptions are disabled. This prevents
	  linker errors when RAM functions are placed too far from their call sites.

	  On Alif hardware, this issue is particularly problematic because MRAM
	  (at ~0x80000000) and TCM (at ~0x00000000) are more than 1GB apart,
	  exceeding the ARM EABI R_ARM_PREL31 relocation limit.

	  See README.md in the linker module for more details.

config ALIF_FIX_SYMBOL_WARNINGS
	bool "Fix symbol table placement warnings"
	default y
	help
	  This option adds a linker script fragment that properly handles symbol
	  table placement to avoid warnings from the LLVM linker (ld.lld) about
	  symbol tables being placed in their respective sections.

	  These warnings are harmless but can clutter the build output.

endif
